// Please do not edit this file. It has been generated automatically
// from `src/module/socket.wren` using `util/wren_to_c_string.py`

static const char* socketModuleSource =
"import \"scheduler\" for Scheduler\n"
"\n"
"class Socket {\n"
"}\n"
"\n"
"// foreign class TCPServer is Base {\n"
"//     construct new(ip, port) {\n"
"//             _ip = ip\n"
"//             _port = port\n"
"//         }\n"
"//     listen=(handler) {\n"
"//         _handler = handler\n"
"//     }\n"
"//     serve() {\n"
"//         serve_(_ip,_port)\n"
"//     }\n"
"\n"
"//     foreign serve_(ip,port)\n"
"// }\n"
"\n"
"class TCPServer {\n"
"    construct new(ip, port) {\n"
"        _ip = ip\n"
"        _port = port\n"
"        _uv = UVListener.new(ip, port, this)\n"
"    }\n"
"    onConnect=(fn) {\n"
"        _onConnect = fn\n"
"    }\n"
"    onConnect { _onConnect }\n"
"    serve() { _uv.listen_() }\n"
"    stop() { _uv.stop_() }\n"
"}\n"
"\n"
"class Connection {\n"
"    construct new() {\n"
"        System.print(\"new connection\")\n"
"        _uv = UVConnection.new(this)\n"
"        _readBuffer = \"\"\n"
"        _isClosed = false\n"
"    }\n"
"    isClosed { _isClosed }\n"
"    writeLn(data) { _uv.write(\"%(data)\n\") }\n"
"    write(data) { _uv.write(\"%(data)\") }\n"
"    uv_ { _uv }\n"
"    close() { \n"
"        _uv.close() \n"
"        _isClosed = true\n"
"    }\n"
"    // instantly returns the read buffer or null if there is nothing to read\n"
"    read() { \n"
"        if (_readBuffer.isEmpty) return null \n"
"        var result = _readBuffer\n"
"        _readBuffer = \"\"\n"
"        return result\n"
"    }\n"
"    // reads data and waits to it if there isn't any\n"
"    readWait() {\n"
"        if (_readBuffer.isEmpty) {\n"
"            _sleepingForRead = Fiber.current\n"
"            Scheduler.runNextScheduled_()\n"
"        }\n"
"        return read()\n"
"    }\n"
"\n"
"    // called by C\n"
"    input_(data) {\n"
"        System.print((\"input_\"))\n"
"        _readBuffer = _readBuffer + data\n"
"        if (_sleepingForRead) { \n"
"            var fiber = _sleepingForRead    \n"
"            _sleepingForRead = null\n"
"            Scheduler.resume_(fiber) \n"
"        }\n"
"    }\n"
"}\n"
"\n"
"#allocates= uv_tcp_tclient\n"
"foreign class UVConnection {\n"
"    construct new(connectionWren) {\n"
"        System.print(\"new UVconnection\")\n"
"    }\n"
"    foreign write(str)\n"
"    foreign close()\n"
"}\n"
"\n"
"foreign class UVListener {\n"
"    construct new(ip,port,serverWren) {\n"
"\n"
"    }\n"
"    // binds and starts listening\n"
"    foreign listen_()\n"
"    // stops listening\n"
"    foreign stop_()\n"
"}";
